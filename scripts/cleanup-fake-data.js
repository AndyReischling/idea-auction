#!/usr/bin/env node

/**
 * Cleanup Script: Remove All Fake Data from Firestore
 * 
 * This script removes:
 * - Fake bot-generated opinions 
 * - Market data for fake opinions
 * - Activity feed entries for fake opinions
 * - Transactions related to fake opinions
 * 
 * Run with: node scripts/cleanup-fake-data.js
 */

const { initializeApp } = require('firebase/app');
const { 
  getFirestore, 
  collection, 
  getDocs, 
  deleteDoc, 
  doc, 
  setDoc,
  query, 
  where,
  writeBatch 
} = require('firebase/firestore');

// Firebase config - replace with your actual config
const firebaseConfig = {
  // Add your Firebase config here
  // This should match your actual Firebase project config
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// List of fake opinion topics that were generated by bots
const FAKE_OPINION_TOPICS = [
  "the future of cryptocurrency markets",
  "climate change impact on agriculture", 
  "remote work productivity trends",
  "electric vehicle adoption rates",
  "social media influence on politics",
  "artificial intelligence job displacement",
  "real estate market predictions",
  "healthcare technology innovations",
  "education system reform needs",
  "energy transition challenges"
];

// Opinion starters that were used to generate fake opinions
const FAKE_OPINION_STARTERS = [
  "I believe that",
  "Based on current trends,", 
  "Looking at the data,",
  "From my analysis,",
  "Considering recent developments,",
  "Given the market conditions,",
  "Observing user behavior,",
  "After studying patterns,"
];

async function cleanupFakeOpinions() {
  console.log('🧹 Starting fake data cleanup...\n');
  
  let totalDeleted = 0;
  
  try {
    // 1. Clean up opinions collection
    console.log('📝 Cleaning opinions collection...');
    const opinionsSnapshot = await getDocs(collection(db, 'opinions'));
    let deletedOpinions = 0;
    
    for (const opinionDoc of opinionsSnapshot.docs) {
      const data = opinionDoc.data();
      const text = data.text || '';
      
      // Check if this is a fake opinion
      const isFakeOpinion = FAKE_OPINION_TOPICS.some(topic => 
        text.toLowerCase().includes(topic.toLowerCase())
      ) || FAKE_OPINION_STARTERS.some(starter =>
        text.toLowerCase().startsWith(starter.toLowerCase())
      ) || data.source === 'bot_generated' || data.isBot === true;
      
      if (isFakeOpinion) {
        console.log(`  ❌ Deleting fake opinion: "${text.slice(0, 50)}..."`);
        await deleteDoc(doc(db, 'opinions', opinionDoc.id));
        deletedOpinions++;
      }
    }
    console.log(`✅ Deleted ${deletedOpinions} fake opinions\n`);
    totalDeleted += deletedOpinions;
    
    // 2. Clean up market-data collection
    console.log('📈 Cleaning market-data collection...');
    const marketDataSnapshot = await getDocs(collection(db, 'market-data'));
    let deletedMarketData = 0;
    
    for (const marketDoc of marketDataSnapshot.docs) {
      const data = marketDoc.data();
      const opinionText = data.opinionText || '';
      
      // Check if this market data is for a fake opinion
      const isFakeMarketData = FAKE_OPINION_TOPICS.some(topic => 
        opinionText.toLowerCase().includes(topic.toLowerCase())
      ) || FAKE_OPINION_STARTERS.some(starter =>
        opinionText.toLowerCase().startsWith(starter.toLowerCase())
      );
      
      if (isFakeMarketData) {
        console.log(`  ❌ Deleting fake market data: "${opinionText.slice(0, 50)}..."`);
        await deleteDoc(doc(db, 'market-data', marketDoc.id));
        deletedMarketData++;
      }
    }
    console.log(`✅ Deleted ${deletedMarketData} fake market data entries\n`);
    totalDeleted += deletedMarketData;
    
    // 3. Clean up activity-feed collection
    console.log('📡 Cleaning activity-feed collection...');
    const activitySnapshot = await getDocs(collection(db, 'activity-feed'));
    let deletedActivity = 0;
    
    for (const activityDoc of activitySnapshot.docs) {
      const data = activityDoc.data();
      const opinionText = data.opinionText || '';
      
      // Check if this activity is related to fake opinions
      const isFakeActivity = FAKE_OPINION_TOPICS.some(topic => 
        opinionText.toLowerCase().includes(topic.toLowerCase())
      ) || FAKE_OPINION_STARTERS.some(starter =>
        opinionText.toLowerCase().startsWith(starter.toLowerCase())
      ) || (data.type === 'generate' && data.isBot === true);
      
      if (isFakeActivity) {
        console.log(`  ❌ Deleting fake activity: ${data.type} - "${opinionText.slice(0, 50)}..."`);
        await deleteDoc(doc(db, 'activity-feed', activityDoc.id));
        deletedActivity++;
      }
    }
    console.log(`✅ Deleted ${deletedActivity} fake activity entries\n`);
    totalDeleted += deletedActivity;
    
    // 4. Clean up transactions collection
    console.log('💰 Cleaning transactions collection...');
    const transactionsSnapshot = await getDocs(collection(db, 'transactions'));
    let deletedTransactions = 0;
    
    for (const transactionDoc of transactionsSnapshot.docs) {
      const data = transactionDoc.data();
      const opinionText = data.opinionText || '';
      
      // Check if this transaction is related to fake opinions
      const isFakeTransaction = FAKE_OPINION_TOPICS.some(topic => 
        opinionText.toLowerCase().includes(topic.toLowerCase())
      ) || FAKE_OPINION_STARTERS.some(starter =>
        opinionText.toLowerCase().startsWith(starter.toLowerCase())
      ) || (data.type === 'generate' && data.botId);
      
      if (isFakeTransaction) {
        console.log(`  ❌ Deleting fake transaction: ${data.type} - "${opinionText.slice(0, 50)}..."`);
        await deleteDoc(doc(db, 'transactions', transactionDoc.id));
        deletedTransactions++;
      }
    }
    console.log(`✅ Deleted ${deletedTransactions} fake transactions\n`);
    totalDeleted += deletedTransactions;
    
    // 5. Clean up bot portfolios containing fake holdings
    console.log('🤖 Cleaning bot portfolios...');
    const botPortfoliosSnapshot = await getDocs(collection(db, 'bot-portfolios'));
    let cleanedPortfolios = 0;
    
    for (const portfolioDoc of botPortfoliosSnapshot.docs) {
      const data = portfolioDoc.data();
      const holdings = data.holdings || [];
      
      // Filter out fake holdings
      const validHoldings = holdings.filter((holding) => {
        const opinionText = holding.opinionText || '';
        return !FAKE_OPINION_TOPICS.some(topic => 
          opinionText.toLowerCase().includes(topic.toLowerCase())
        ) && !FAKE_OPINION_STARTERS.some(starter =>
          opinionText.toLowerCase().startsWith(starter.toLowerCase())
        );
      });
      
      if (validHoldings.length !== holdings.length) {
        console.log(`  🧹 Cleaning bot portfolio: ${portfolioDoc.id} (removed ${holdings.length - validHoldings.length} fake holdings)`);
        await deleteDoc(doc(db, 'bot-portfolios', portfolioDoc.id));
        if (validHoldings.length > 0) {
          // Re-create with only valid holdings
          await setDoc(doc(db, 'bot-portfolios', portfolioDoc.id), {
            ...data,
            holdings: validHoldings
          });
        }
        cleanedPortfolios++;
      }
    }
    console.log(`✅ Cleaned ${cleanedPortfolios} bot portfolios\n`);
    
    console.log(`🎉 Cleanup completed!`);
    console.log(`📊 Total items deleted: ${totalDeleted}`);
    console.log(`\n✨ All fake data has been removed from Firestore.`);
    console.log(`🔒 The system now only contains real user-generated data.`);
    
  } catch (error) {
    console.error('❌ Error during cleanup:', error);
    process.exit(1);
  }
}

// Run the cleanup
if (require.main === module) {
  console.log('🚀 Starting Firestore fake data cleanup...\n');
  
  console.log('⚠️  WARNING: This will permanently delete fake bot-generated data!');
  console.log('📋 This includes:');
  console.log('   - Fake bot-generated opinions');
  console.log('   - Market data for fake opinions'); 
  console.log('   - Activity feed entries for fake opinions');
  console.log('   - Transactions related to fake opinions');
  console.log('   - Bot portfolio holdings of fake opinions\n');
  
  // Add a 3-second delay to allow reading the warning
  setTimeout(() => {
    cleanupFakeOpinions();
  }, 3000);
}

module.exports = { cleanupFakeOpinions }; 